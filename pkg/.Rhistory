if(index2 %in% param_link_male){
off[linked_param_male] = off[linked_param_male] + sign * sample(range_mut,1)
}
if(index2 %in% param_link_female){
off[linked_param_female] = off[linked_param_female] + sign * sample(range_mut,1)
}
}
}else{
if(index2 %in% config$which_linked_parameter && rbinom(1,1,0.5)){ # check if this is the parameter with the link
second_parameter = setdiff(config$which_linked_parameter, index2)
# with a 50% chance adapt the linked parameter so that the product stays the same
product_prior = (off[index2] - mutation_size) * off[ second_parameter]
off[second_parameter] = product_prior / off[index2]
}
}
}
}
}
# Round only the columns identified by is_integer
off[which(is_integer)] <- round(off[which(is_integer)])
################################################################################
##################### Rounding in light of the constraints ######################
################################################################################
{
base_cost_ini <- unlist(config$base_cost_ini)
base_cost <- calc_cost(base_cost_ini)
off = as.vector(unlist(off))
new_cost <- base_cost #calc_cost(off)
##############################################
###################### HACK!
index2 <- 1
while(abs(new_cost-base_cost)>5000 & index2 < 20){
off[cost_par] <- round(off[cost_par] * base_cost / new_cost)
new_cost <- calc_cost(off)
index2 <- index2 + 1
}
################################################################################
######### Please adopt this part depending on your breeding program ############
########################## Adjust linked_parameters ############################
################################################################################
################################################################################
################## Compensate the rest in the cheapest unit #####################
################################################################################
if(is_hybrid_breeding){
if(new_cost!=base_cost){
if(config$cheapest_unit_female > length(off)){
stop("cheapest_unit_female of the config file has to be <= ",length(off))
}
if(config$cheapest_unit_male > length(off)){
stop("cheapest_unit_male of the config file has to be <= ",length(off))
}
if(rbinom(1,1,0.5)==1){
off[cheapest_unit_male] <- off[cheapest_unit_male] - round((new_cost - base_cost) / cost_cheapest_male) -1
} else{
off[cheapest_unit_female] <- off[cheapest_unit_female] - round((new_cost - base_cost) / cost_cheapest_female) -1
}
}
}
if(is_line_breeding){
if(new_cost!=base_cost){
if(config$cheapest_unit > length(off)){
stop("cheapest_unit of the config file has to be <= ",length(off))
}
off[cheapest_unit] <- off[cheapest_unit] - round((new_cost - base_cost) / cost_cheapest) -1
}
}
}
################################################################################
################################################################################
################################################################################
####################### Managing diversity of offspring  #######################
################################################################################
activ_indi <- 2
selected <- 1
if(index > (n_off1 + n_off_recombination) || index < (n_off1+1)){
distance <- Inf
} else{
#
distance <- numeric(nrow(new_setting))
for(index2 in 1:length(param_cols)){
distance <- distance + ((new_setting[,index2] - off[index2])/range[index2])^2
}
distance = sqrt(distance)
re <- c(re, min(distance))
}
# Test some random settings
# This should avoid long-term convergence into a local maxima instead of a global maxima
if(index > (n_off1 + n_off_recombination + n_off_mutation)){
est_value <- 0
tt <- 1
while(est_value < thres){
off <- generate_new()
if(size_smooth<Inf){
est_value <- approx_f(off, bw = range_smooth, results_smooth)
} else{
est_value <- approx_f(off, bw = range_smooth, results_smooth)
}
if(tt%%100==0){
thres <- thres - sd_results
}
tt <- tt + 1
if(is.na(est_value)){
est_value = thres
}
}
}
is_copy <- sum(colSums(t(new_setting)==off)==nfactors)>0
is_cor <- (sum(off[which(!is_binary)] > 0)==nfactors-number_binary_parameter)
if((!is_copy  && min(distance)>(0.05 * nfactors * distance_factor) && is_cor)||attempt > 100){
valid <- TRUE
attempt <- 1
} else{
attempt <- attempt + 1
}
################################################################################
######### Please adopt this part depending on your breeding program ############
############################## keeping constraints #############################
################################################################################
# you can imagine a scenario when you want that all parameters have a value bigger than 2
# you can add as much as constraints you wish to have here
# this probably slow than the evolutionary pipeline from seconds to some minutes due to re sampling process
# if (all(off > 2)) {
# print("All conditions for contrains are satisfied.")
#valid <- TRUE
# attempt <- 1
#} else {
#  valid <- FALSE
# attempt <- attempt + 1
# print("Not all conditions for contrains are satisfied.")
#}
################################################################################
}
new_setting[index,] <- off
}
new_setting <- cbind(sample(1:1e5,1),new_setting)
if(any(rowSums(new_setting[,-1])== 0)){
warning("some new settings are zero --> check")
new_setting <- new_setting[rowSums(new_setting[,-1]) != 0,]
}
#add the column's name
names <- config$name_parameter
colnames(new_setting) <- c("randomSeed", names)
rownames(new_setting) <- NULL
print(new_setting)
write.csv(new_setting, file = output)
new_setting
plot(new_setting[,1])
plot(new_setting[,2])
mut_offspring
mut_offspring_temp
mut_parent_temp
load("machine_mir.RData")
load("THI_9iter_5_2_0_lac1_v4.RData")
load("C:/Users/pook001/OneDrive - Wageningen University & Research/tmp.RData")
length(prot_remai)
length(prot_remain)
head(weather_table)
dim(weather_table)
plot(xs7)
plot(xs6)
plot(xs5)
plot(xs4)
plot(xs3)
plot(xs4)
plot(xs2)
plot(xs3)
plot(xs2)
plot(xs1)
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table[,9]], prot_remain, x.points = xs2, bandwidth = 2, kernel = "normal")
weather_table = weather_table[1:250000,]
prot_remain = prot_remain[1:250000]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table[,9]], prot_remain, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs[weather_table[,12]], prot_remain, x.points = xs, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs3[weather_table[,14]], prot_remain, x.points = xs3, bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table[,16]], prot_remain, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
load("C:/Users/pook001/OneDrive - Wageningen University & Research/tmp.RData")
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table[,16]], prot_remain, x.points = xs4, bandwidth = 1, kernel = "normal")
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs5[weather_table_sub[,18]], prot_remain_sub, x.points = xs5, bandwidth = 10, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(xs7[weather_table_sub[,30]], prot_remain_sub, x.points = xs7, bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs7[weather_table_sub[,30]], prot_remain_sub, x.points = xs7, bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
xs[weather_table[,2]] # THI absolute
xs7[weather_table[,30]] # THI change
cor(xs[weather_table[,2]], xs7[weather_table[,30]])
plot(xs[weather_table[,2]][1:100000], xs7[weather_table[,30]][1:100000])
head(weather_data)
length(weather_data)
dim(weather_table)
head(weather_table)
par(mfrow = c(1,1))
smooth = ksmooth(xs[weather_table_sub[,12]], prot_remain_sub, x.points = xs, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs[weather_table_sub[,12]], prot_remain_sub, x.points = xs, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs[weather_table_sub[,12]], prot_remain_sub, x.points = xs, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
xs3
xs4
View(tt)
hist(xs4[weather_table_sub[,16]])
hist(xs5[weather_table_sub[,18]])
hist(xs6[weather_table_sub[,20]])
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
hist(xs6[weather_table_sub[,20]])
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[sx6<10], bandwidth = 2, kernel = "normal")
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 2500000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 2500000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs7[weather_table_sub[,30]], prot_remain_sub, x.points = xs7, bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs7[weather_table_sub[,30]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs7[weather_table_sub[,28]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs7[weather_table_sub[,26]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 2500000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 2500000)]
xs7[xs7 > (-5) & xs7 <5]
par(mfrow = c(1,1))
smooth = ksmooth(xs7[weather_table_sub[,30]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs7[weather_table_sub[,28]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs7[weather_table_sub[,26]], prot_remain_sub, x.points = xs7[xs7 > (-5) & xs7 <5], bandwidth = 0.5, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
load("C:/Users/pook001/OneDrive - Wageningen University & Research/tmp.RData")
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs2[weather_table_sub[,9]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
smooth = ksmooth(xs2[weather_table_sub[,10]], prot_remain_sub, x.points = xs2, bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
xs
xs3
xs4
xs5
par(mfrow = c(1,1))
smooth = ksmooth(xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
xs6[xs6<10]
View(test)
hist(xs6[weather_table_sub[,20]])
weather_table_sub = weather_table[sample(nrow(weather_table), 2500000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 2500000)]
par(mfrow = c(1,1))
smooth = ksmooth(
xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 2, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
par(mfrow = c(1,1))
smooth = ksmooth(
xs6[weather_table_sub[,20]], prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
xs6[weather_table_sub[,20]] > 10
overwrite = xs6[weather_table_sub[,20]] > 10
overwrite = xs6[weather_table_sub[,20]] > 10
tmp1 = xs6[weather_table_sub[,20]]
tmp1[overwrite] = 10
par(mfrow = c(1,1))
smooth = ksmooth(
tmp1, prot_remain_sub, x.points = xs6[xs6<10], bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs5[weather_table_sub[,18]], prot_remain_sub, x.points = xs5, bandwidth = 10, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
hist(xs5[weather_table_sub[,18]])
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2)
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
weather_table_sub = weather_table[sample(nrow(weather_table), 250000),]
prot_remain_sub = prot_remain[sample(nrow(weather_table), 250000)]
par(mfrow = c(1,1))
smooth = ksmooth(xs4[weather_table_sub[,16]], prot_remain_sub, x.points = xs4, bandwidth = 1, kernel = "normal")
plot(smooth, col = "red", lwd = 2, ylim = c(-0.1,0.1))
setwd("C:/Users/pook001/OneDrive - Wageningen University & Research/GitHub/MoBPS/development/MoBPS/")
devtools::load_all()
data(map_tilapia1)
MoBPSmaps::map_tilapia1
population <- creating.diploid(nsnp = 10000, nindi = 100, map = MoBPSmaps::map_tilapia1,                 #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
population <- creating.diploid(nsnp = 10000, nindi = 100, map = MoBPSmaps::map_tilapia1,                 #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map = MoBPSmaps::map_tilapia1
map = map[sort(sample(nrow(map), 10000)),]
population <- creating.diploid(nindi = 100, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
#Define trait architecture
real.bv.add<- matrix(c(42, 1, 0, 0.5, 1
234, 10, 0, 0.5, 2,
#Enter these as a trait
population <- creating.trait(population, real.bv.add = real.bv.add)
#Define trait architecture
real.bv.add<- matrix(c(42, 1, 0, 0.5, 1
234, 10, 0, 0.5, 2,
#Define trait architecture
real.bv.add<- matrix(c(42, 1, 0, 0.5, 1,
234, 10, 0, 0.5, 2,
2000, 3, 0, 0.5, 1), nrow=3, byrow=TRUE)
#Enter these as a trait
population <- creating.trait(population, real.bv.add = real.bv.add)
#Define trait architecture
real.bv.add<- matrix(c(42, 1, 0, 0.5, 1,
234, 10, 0, 0.5, 2,
500, 3, 0, 0.5, 1), nrow=3, byrow=TRUE)
#Enter these as a trait
population <- creating.trait(population, real.bv.add = real.bv.add)
summary(population)
get.qtl.effects(population)
get.qtl.effects(population)[[1]]
get.qtl.effects(population)[[1]][[1]]
real.bv.add = rbind(major_qtl, get.qtl.effects(population)[[1]][[1]][,1:5])
#Define trait architecture
major_qtl<- matrix(c(42, 1, 0, 0.5, 1,
234, 10, 0, 0.5, 2,
500, 3, 0, 0.5, 1), nrow=3, byrow=TRUE)
real.bv.add = rbind(major_qtl, get.qtl.effects(population)[[1]][[1]][,1:5])
#Enter these as a trait
population <- creating.trait(population, real.bv.add = real.bv.add, replace.traits = TRUE)
summary(population)
save(file = "tilapia_map.RData", list = c("map_tilapia1"))
getwd()
# downsampling of the genetic map ((sort to include markers by chromosome))
map_tilapia1 = MoBPSmaps::map_tilapia1
map = map[sort(sample(nrow(map_tilapia1), 10000)),]
population <- creating.diploid(nindi = 100, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
# downsampling of the genetic map ((sort to include markers by chromosome))
map_tilapia1 = MoBPSmaps::map_tilapia1
map = map[sort(sample(nrow(map_tilapia1), 10000)),]
population <- creating.diploid(nindi = 100, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
population <- creating.diploid(nindi = 100, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
population <- creating.diploid(nindi = 100, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
population <- creating.diploid(nindi = 100, nsnp = 10000,map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
sessionInfo
sessionInfo()
population <- creating.diploid(nindi = 100, nsnp = 10000, map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
population <- creating.diploid(nindi = 100, nsnp = 10000, map = MoBPSmaps::map_tilapia1,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
population <- creating.diploid(nindi = 100,  map = MoBPSmaps::map_tilapia1,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
population <- creating.diploid(nindi = 100,  map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
map
table(map[,1])
dim(map)
plot(map[,1])
MoBPSmaps::map_tilapia1
plot(MoBPSmaps::map_tilapia1[,1])
# downsampling of the genetic map ((sort to include markers by chromosome))
map_tilapia1 = MoBPSmaps::map_tilapia1
map = map[sort(sample(nrow(map_tilapia1), 10000)),]
plot(map[,1])
plot(map[,2])
map_tilapia1)
nrow(map_tilapia1)
sample(nrow(map_tilapia1), 10000)
sort(sample(nrow(map_tilapia1), 10000))
# downsampling of the genetic map ((sort to include markers by chromosome))
map_tilapia1 = MoBPSmaps::map_tilapia1
map = map_tilapia1[sort(sample(nrow(map_tilapia1), 10000)),]
population <- creating.diploid(nindi = 100,  map = map,                #I get an error: Error: object 'map_tilapia1' not found
sex.quota = 0.5,  n.additive = c(1000), mean.target = 65, var.target = 12, #generate a purely additive trait
name.cohort = "Founder")
#Define trait architecture
major_qtl<- matrix(c(42, 1, 0, 0.5, 1,
234, 10, 0, 0.5, 2,
500, 3, 0, 0.5, 1), nrow=3, byrow=TRUE)
# combine your major qtl with already generated QTLs
real.bv.add = rbind(major_qtl, get.qtl.effects(population)[[1]][[1]][,1:5])
#Enter these as a trait
population <- creating.trait(population, real.bv.add = real.bv.add, replace.traits = TRUE)
summary(population)
save(file = "tilapia_map.RData", list = c("map_tilapia1"))
