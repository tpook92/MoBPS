utils::write.table(file=matesel.ini.path, paste0(names[index] , " ", 0, " ", 1, " ", 1, " ", max(bve[,index]), " ", max(bve[,index]), " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
}
}
## matesel file prep
{
matesel.ini = TRUE ## ini-file should be written
matesel.ini.path = NULL # where matesel files are located
matesel.main = TRUE ## ini-file should be written
matesel.main.path = NULL # where matesel files are located
matesel.files = "Matesel_files"
if(sum(dir() == matesel.files)==0){
if(verbose){ cat(paste0("Create temporary folder for Matesel files: ",   matesel.files, "\n"))}
dir.create(matesel.files)
}
if(length(matesel.ini.path)==0){
matesel.ini.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.ini")
} else{
matesel.ini = FALSE ##
}
if(length(matesel.main.path)==0){
matesel.main.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.txt")
} else{
matesel.main= FALSE ##
}
# generation of ini-file (( most parameters will become input parameter))
utils::write.table(file=matesel.ini.path, "Integer parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE)
utils::write.table(file=matesel.ini.path, paste0(" ", 3, " , ", "Balance Strategy"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Grouping (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 50, " , ", "New Matings to be made if not grouping.  Exclude Committed Matings here."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "MinNewGens (No improvement for this number of generations helps to stop)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 5000, " , ", "AbsMinNewGens (No fewer than this total number of generations are required)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10000, " , ", "MaxNewGens (Stops on first improvement or nsee after this)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "n_see (report status every n_see generations at least)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front0Gens (Generations to find 0 degree point on Frontier)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front90Gens (Generations to find 90 degree point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "FrontMidGens (Generations to find each intermediate point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Threshold Management (1 avoid HS+FS matings, 2 avoid just FS matings. See manual for more)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "UseColleau for (usually) faster x'Ax calculation (NRM, not GRM) (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "SeedStart (change to change random number sequence)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Verbose (Reporting level on console)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "ReadGRM   0:NRM.  1:GRMcoan.  2:GRMprogF.  3:GRMcoan and GRMprogF."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control reproductive boosting: MOETing = 1, IVF = 0"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Multiple EndUses (0=no, 1=original format, >1=#EndUses in new format)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control backup matings (0/1 for: Block, Unused, Limit, Print. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control avoidance of duplicate, reciprocal and self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control cost of assembling mating groups (1 or 11 Hard, 2 Distance, 3 Overlap)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "(Deprecated) Switch to control ranking of full sibs"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Committed Matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, "Real number parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 25, " , ", "TargetDegrees (Used under BS3, BS4 and BS5 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0.075, " , ", "xAx2Limit  Coancestry limit (Used under BS1 and BS2 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 75, " , ", "WeightOnxAx2 (Unscaled. Used under BS0 only. Use histogram control of Progeny Coancestry instead.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -1, " , ", "WeightOnF (a negative Weighting to reduce Progeny Inbreeding)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "WeightOnFrontier (use only to alter overall emphasis on Frontier) "), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for later use (was WeightOnF_T)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 99.9, " , ", "ConvergePercentTarget  (Helps to stop run. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "NoChangePercent (No improvement over ~this percent of generations helps to stop. See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "FrontDegreeGap  (For Frontier drawing)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "xNRMlimit (Values below this are treated as zero in NRM, for speed.  Generally leave at 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "BiSexCands  (Set to 1 where a candidate can be male AND female, else 0.  See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -999999, " , ", "Missing (This value is dataset is treated as missing for traits, etc.  Preferably use a period . )"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Mixed Mating Groups (number of mixed mating groups, else 0 to not use this feature)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for avoiding duplicate, reciprocal and/or self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for soft implementation of Location issue"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("For a new job leave the rest of this file blank, after this line. Run then click Save in Windows MateSel.  Then you can edit defaults here if required."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", length(population$info$trait.name), " , ", "Number of traits"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Number of marker loci"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Parameters to manipulate Inbreeding, Coancestry, Trait and Marker histograms ..."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Item         Invoked     ControlType     Weighting        Target1       Target2    Target3"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgInb" , " ", 0, " ", 8, " ", 1, " ", 0.2499, " ", 0.2499, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("SireCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("DamCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
## generation of the data file
data_file = NULL
gen = 4
database = NULL
cohorts = NULL
pedigree.depth = 7
# if sex are assigned based on database position if gen/database/cohorts are used
selection.m.gen = NULL
selection.m.database = NULL
selection.m.cohorts = NULL
maxuse.m = 25
minuse.m = 0
absminuse.m = 0
selection.f.gen = NULL
selection.f.database = NULL
selection.f.cohorts = NULL
maxuse.f = 1
minuse.f = 0
absminuse.f = 0
database = get.database(population, gen = gen, database = database, cohorts = cohorts, per.individual = TRUE)
ped = get.pedigree(population, database = database, id = TRUE)
n_indi = nrow(ped)
sex = rep("F", n_indi)
sex[database[,2]==1] = "M"
maxuse = rep(maxuse.m, n_indi)
maxuse[sex == "F"] = maxuse.f
minuse = rep(minuse.m, n_indi)
minuse[sex == "F"] = minuse.f
absminuse = rep(absminuse.m, n_indi)
absminuse[sex == "F"] = absminuse.f
matinggroup = 0 ## PLACEHOLDER!
data_file = cbind(ped, sex, maxuse, minuse, absminuse, matinggroup)
## ADD old animals
## PLACEHOLDER - just use all old for now
ped2 = get.pedigree(population, gen = 1:3, id = TRUE)
database2 = get.database(population, gen = 1:3,per.individual = TRUE)
sex2 = rep("M", nrow(database2))
sex2[database2[,2]==2] = "F"
data_file2 = cbind(ped2, sex2,0,0,0,0)
bve = t(get.bve(population, database = database))
bve2 = t(get.bve(population, database = database2))
index_value = breeding.diploid(population, selection.m.database = database, export.selected = TRUE,
sort.selected.pos = TRUE)[[1]][,4]
index_value2 = 0
data_file = cbind(data_file, bve, index_value)
data_file2 = cbind(data_file2, bve2, index_value2)
names = colnames(bve)
names <- gsub(" ", "_", names)
data_file_joint = rbind(data_file2, data_file)
colnames(data_file_joint) = c("Id", "Sire", "Dam", "Sex", "MaxUse", "Minuse", "AbsMinuse", "MatingGroup", names, "Index")
write.table(file = matesel.main.path, data_file_joint, row.names = FALSE, col.names = TRUE , quote=FALSE )
for(index in 1:ncol(bve)){
utils::write.table(file=matesel.ini.path, paste0(names[index] , " ", 0, " ", 1, " ", 1, " ", max(bve[,index]), " ", max(bve[,index]), " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
}
}
## matesel file prep
{
matesel.ini = TRUE ## ini-file should be written
matesel.ini.path = NULL # where matesel files are located
matesel.main = TRUE ## ini-file should be written
matesel.main.path = NULL # where matesel files are located
matesel.files = "Matesel_files"
if(sum(dir() == matesel.files)==0){
if(verbose){ cat(paste0("Create temporary folder for Matesel files: ",   matesel.files, "\n"))}
dir.create(matesel.files)
}
if(length(matesel.ini.path)==0){
matesel.ini.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.ini")
} else{
matesel.ini = FALSE ##
}
if(length(matesel.main.path)==0){
matesel.main.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.txt")
} else{
matesel.main= FALSE ##
}
# generation of ini-file (( most parameters will become input parameter))
utils::write.table(file=matesel.ini.path, "Integer parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE)
utils::write.table(file=matesel.ini.path, paste0(" ", 3, " , ", "Balance Strategy"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Grouping (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 50, " , ", "New Matings to be made if not grouping.  Exclude Committed Matings here."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "MinNewGens (No improvement for this number of generations helps to stop)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 5000, " , ", "AbsMinNewGens (No fewer than this total number of generations are required)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10000, " , ", "MaxNewGens (Stops on first improvement or nsee after this)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "n_see (report status every n_see generations at least)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front0Gens (Generations to find 0 degree point on Frontier)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front90Gens (Generations to find 90 degree point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "FrontMidGens (Generations to find each intermediate point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Threshold Management (1 avoid HS+FS matings, 2 avoid just FS matings. See manual for more)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "UseColleau for (usually) faster x'Ax calculation (NRM, not GRM) (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "SeedStart (change to change random number sequence)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Verbose (Reporting level on console)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "ReadGRM   0:NRM.  1:GRMcoan.  2:GRMprogF.  3:GRMcoan and GRMprogF."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control reproductive boosting: MOETing = 1, IVF = 0"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Multiple EndUses (0=no, 1=original format, >1=#EndUses in new format)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control backup matings (0/1 for: Block, Unused, Limit, Print. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control avoidance of duplicate, reciprocal and self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control cost of assembling mating groups (1 or 11 Hard, 2 Distance, 3 Overlap)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "(Deprecated) Switch to control ranking of full sibs"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Committed Matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, "Real number parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 25, " , ", "TargetDegrees (Used under BS3, BS4 and BS5 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0.075, " , ", "xAx2Limit  Coancestry limit (Used under BS1 and BS2 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 75, " , ", "WeightOnxAx2 (Unscaled. Used under BS0 only. Use histogram control of Progeny Coancestry instead.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -1, " , ", "WeightOnF (a negative Weighting to reduce Progeny Inbreeding)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "WeightOnFrontier (use only to alter overall emphasis on Frontier) "), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for later use (was WeightOnF_T)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 99.9, " , ", "ConvergePercentTarget  (Helps to stop run. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "NoChangePercent (No improvement over ~this percent of generations helps to stop. See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "FrontDegreeGap  (For Frontier drawing)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "xNRMlimit (Values below this are treated as zero in NRM, for speed.  Generally leave at 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "BiSexCands  (Set to 1 where a candidate can be male AND female, else 0.  See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -999999, " , ", "Missing (This value is dataset is treated as missing for traits, etc.  Preferably use a period . )"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Mixed Mating Groups (number of mixed mating groups, else 0 to not use this feature)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for avoiding duplicate, reciprocal and/or self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for soft implementation of Location issue"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("For a new job leave the rest of this file blank, after this line. Run then click Save in Windows MateSel.  Then you can edit defaults here if required."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", length(population$info$trait.name), " , ", "Number of traits"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Number of marker loci"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Parameters to manipulate Inbreeding, Coancestry, Trait and Marker histograms ..."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Item         Invoked     ControlType     Weighting        Target1       Target2    Target3"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgInb" , " ", 0, " ", 8, " ", 1, " ", 0.2499, " ", 0.2499, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("SireCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("DamCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
## generation of the data file
data_file = NULL
gen = 4
database = NULL
cohorts = NULL
pedigree.depth = 7
# if sex are assigned based on database position if gen/database/cohorts are used
selection.m.gen = NULL
selection.m.database = NULL
selection.m.cohorts = NULL
maxuse.m = 25
minuse.m = 0
absminuse.m = 0
selection.f.gen = NULL
selection.f.database = NULL
selection.f.cohorts = NULL
maxuse.f = 1
minuse.f = 0
absminuse.f = 0
database = get.database(population, gen = gen, database = database, cohorts = cohorts, per.individual = TRUE)
ped = get.pedigree(population, database = database, id = TRUE)
n_indi = nrow(ped)
sex = rep("F", n_indi)
sex[database[,2]==1] = "M"
maxuse = rep(maxuse.m, n_indi)
maxuse[sex == "F"] = maxuse.f
minuse = rep(minuse.m, n_indi)
minuse[sex == "F"] = minuse.f
absminuse = rep(absminuse.m, n_indi)
absminuse[sex == "F"] = absminuse.f
matinggroup = 0 ## PLACEHOLDER!
data_file = cbind(ped, sex, maxuse, minuse, absminuse, matinggroup)
## ADD old animals
## PLACEHOLDER - just use all old for now
ped2 = get.pedigree(population, gen = 1:3, id = TRUE)
database2 = get.database(population, gen = 1:3,per.individual = TRUE)
sex2 = rep("M", nrow(database2))
sex2[database2[,2]==2] = "F"
data_file2 = cbind(ped2, sex2,0,0,0,0)
bve = t(get.bve(population, database = database))
bve2 = t(get.bve(population, database = database2))
index_value = breeding.diploid(population, selection.m.database = database, export.selected = TRUE,
sort.selected.pos = TRUE)[[1]][,4]
index_value2 = 0
data_file = cbind(data_file, bve, index_value)
data_file2 = cbind(data_file2, bve2, index_value2)
names = colnames(bve)
names <- gsub(" ", "_", names)
data_file_joint = rbind(data_file2, data_file)
colnames(data_file_joint) = c("Id", "Sire", "Dam", "Sex", "MaxUse", "Minuse", "AbsMinuse", "MatingGroup", names, "Index")
write.table(file = matesel.main.path, data_file_joint, row.names = FALSE, col.names = TRUE , quote=FALSE )
for(index in 1:ncol(bve)){
utils::write.table(file=matesel.ini.path, paste0(names[index] , " ", 0, " ", 1, " ", 1, " ", max(bve[,index]), " ", max(bve[,index]), " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
}
}
## matesel file prep
{
matesel.ini = TRUE ## ini-file should be written
matesel.ini.path = NULL # where matesel files are located
matesel.main = TRUE ## ini-file should be written
matesel.main.path = NULL # where matesel files are located
matesel.files = "Matesel_files"
if(sum(dir() == matesel.files)==0){
if(verbose){ cat(paste0("Create temporary folder for Matesel files: ",   matesel.files, "\n"))}
dir.create(matesel.files)
}
if(length(matesel.ini.path)==0){
matesel.ini.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.ini")
} else{
matesel.ini = FALSE ##
}
if(length(matesel.main.path)==0){
matesel.main.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.txt")
} else{
matesel.main= FALSE ##
}
# generation of ini-file (( most parameters will become input parameter))
utils::write.table(file=matesel.ini.path, "Integer parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE)
utils::write.table(file=matesel.ini.path, paste0(" ", 3, " , ", "Balance Strategy"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Grouping (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 50, " , ", "New Matings to be made if not grouping.  Exclude Committed Matings here."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "MinNewGens (No improvement for this number of generations helps to stop)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 5000, " , ", "AbsMinNewGens (No fewer than this total number of generations are required)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10000, " , ", "MaxNewGens (Stops on first improvement or nsee after this)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "n_see (report status every n_see generations at least)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front0Gens (Generations to find 0 degree point on Frontier)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front90Gens (Generations to find 90 degree point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "FrontMidGens (Generations to find each intermediate point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Threshold Management (1 avoid HS+FS matings, 2 avoid just FS matings. See manual for more)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "UseColleau for (usually) faster x'Ax calculation (NRM, not GRM) (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "SeedStart (change to change random number sequence)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Verbose (Reporting level on console)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "ReadGRM   0:NRM.  1:GRMcoan.  2:GRMprogF.  3:GRMcoan and GRMprogF."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control reproductive boosting: MOETing = 1, IVF = 0"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Multiple EndUses (0=no, 1=original format, >1=#EndUses in new format)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control backup matings (0/1 for: Block, Unused, Limit, Print. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control avoidance of duplicate, reciprocal and self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control cost of assembling mating groups (1 or 11 Hard, 2 Distance, 3 Overlap)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "(Deprecated) Switch to control ranking of full sibs"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Committed Matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, "Real number parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 25, " , ", "TargetDegrees (Used under BS3, BS4 and BS5 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0.075, " , ", "xAx2Limit  Coancestry limit (Used under BS1 and BS2 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 75, " , ", "WeightOnxAx2 (Unscaled. Used under BS0 only. Use histogram control of Progeny Coancestry instead.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -1, " , ", "WeightOnF (a negative Weighting to reduce Progeny Inbreeding)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "WeightOnFrontier (use only to alter overall emphasis on Frontier) "), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for later use (was WeightOnF_T)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 99.9, " , ", "ConvergePercentTarget  (Helps to stop run. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "NoChangePercent (No improvement over ~this percent of generations helps to stop. See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "FrontDegreeGap  (For Frontier drawing)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "xNRMlimit (Values below this are treated as zero in NRM, for speed.  Generally leave at 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "BiSexCands  (Set to 1 where a candidate can be male AND female, else 0.  See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -999999, " , ", "Missing (This value is dataset is treated as missing for traits, etc.  Preferably use a period . )"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Mixed Mating Groups (number of mixed mating groups, else 0 to not use this feature)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for avoiding duplicate, reciprocal and/or self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for soft implementation of Location issue"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("For a new job leave the rest of this file blank, after this line. Run then click Save in Windows MateSel.  Then you can edit defaults here if required."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", length(population$info$trait.name), " , ", "Number of traits"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Number of marker loci"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Parameters to manipulate Inbreeding, Coancestry, Trait and Marker histograms ..."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Item         Invoked     ControlType     Weighting        Target1       Target2    Target3"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgInb" , " ", 0, " ", 8, " ", 1, " ", 0.2499, " ", 0.2499, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("SireCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("DamCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
## generation of the data file
data_file = NULL
gen = 4
database = NULL
cohorts = NULL
pedigree.depth = 7
# if sex are assigned based on database position if gen/database/cohorts are used
selection.m.gen = NULL
selection.m.database = NULL
selection.m.cohorts = NULL
maxuse.m = 25
minuse.m = 0
absminuse.m = 0
selection.f.gen = NULL
selection.f.database = NULL
selection.f.cohorts = NULL
maxuse.f = 1
minuse.f = 0
absminuse.f = 0
database = get.database(population, gen = gen, database = database, cohorts = cohorts, per.individual = TRUE)
ped = get.pedigree(population, database = database, id = TRUE)
n_indi = nrow(ped)
sex = rep("F", n_indi)
sex[database[,2]==1] = "M"
maxuse = rep(maxuse.m, n_indi)
maxuse[sex == "F"] = maxuse.f
minuse = rep(minuse.m, n_indi)
minuse[sex == "F"] = minuse.f
absminuse = rep(absminuse.m, n_indi)
absminuse[sex == "F"] = absminuse.f
matinggroup = 0 ## PLACEHOLDER!
data_file = cbind(ped, sex, maxuse, minuse, absminuse, matinggroup)
## ADD old animals
## PLACEHOLDER - just use all old for now
ped2 = get.pedigree(population, gen = 1:3, id = TRUE)
database2 = get.database(population, gen = 1:3,per.individual = TRUE)
sex2 = rep("M", nrow(database2))
sex2[database2[,2]==2] = "F"
data_file2 = cbind(ped2, sex2,0,0,0,0)
bve = t(get.bve(population, database = database))
bve2 = t(get.bve(population, database = database2))
index_value = breeding.diploid(population, selection.m.database = database, export.selected = TRUE,
sort.selected.pos = TRUE)[[1]][,4]
index_value2 = 0
data_file = cbind(data_file, bve, index_value)
data_file2 = cbind(data_file2, bve2, index_value2)
names = colnames(bve)
names <- gsub(" ", "_", names)
data_file_joint = rbind(data_file2, data_file)
colnames(data_file_joint) = c("Id", "Sire", "Dam", "Sex", "MaxUse", "Minuse", "AbsMinuse", "MatingGroup", names, "Index")
write.table(file = matesel.main.path, data_file_joint, row.names = FALSE, col.names = TRUE , quote=FALSE )
for(index in 1:ncol(bve)){
utils::write.table(file=matesel.ini.path, paste0(names[index] , " ", 0, " ", 1, " ", 1, " ", max(bve[,index]), " ", max(bve[,index]), " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
}
}
utils::write.table(file=matesel.ini.path, paste0(" ", 0.075, " , ", "xAx2Limit  Coancestry limit (Used under BS1 and BS2 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE, dec = ",")
## matesel file prep
{
matesel.ini = TRUE ## ini-file should be written
matesel.ini.path = NULL # where matesel files are located
matesel.main = TRUE ## ini-file should be written
matesel.main.path = NULL # where matesel files are located
matesel.files = "Matesel_files"
if(sum(dir() == matesel.files)==0){
if(verbose){ cat(paste0("Create temporary folder for Matesel files: ",   matesel.files, "\n"))}
dir.create(matesel.files)
}
if(length(matesel.ini.path)==0){
matesel.ini.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.ini")
} else{
matesel.ini = FALSE ##
}
if(length(matesel.main.path)==0){
matesel.main.path = paste0(matesel.files, if(mixblup.files=="") {} else{"/"}, "Matesel.txt")
} else{
matesel.main= FALSE ##
}
# generation of ini-file (( most parameters will become input parameter))
utils::write.table(file=matesel.ini.path, "Integer parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE)
utils::write.table(file=matesel.ini.path, paste0(" ", 3, " , ", "Balance Strategy"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Grouping (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 50, " , ", "New Matings to be made if not grouping.  Exclude Committed Matings here."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "MinNewGens (No improvement for this number of generations helps to stop)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 5000, " , ", "AbsMinNewGens (No fewer than this total number of generations are required)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10000, " , ", "MaxNewGens (Stops on first improvement or nsee after this)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "n_see (report status every n_see generations at least)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front0Gens (Generations to find 0 degree point on Frontier)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2000, " , ", "Front90Gens (Generations to find 90 degree point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1000, " , ", "FrontMidGens (Generations to find each intermediate point)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Threshold Management (1 avoid HS+FS matings, 2 avoid just FS matings. See manual for more)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "UseColleau for (usually) faster x'Ax calculation (NRM, not GRM) (1, else 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "SeedStart (change to change random number sequence)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 2, " , ", "Verbose (Reporting level on console)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "ReadGRM   0:NRM.  1:GRMcoan.  2:GRMprogF.  3:GRMcoan and GRMprogF."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control reproductive boosting: MOETing = 1, IVF = 0"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Multiple EndUses (0=no, 1=original format, >1=#EndUses in new format)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control backup matings (0/1 for: Block, Unused, Limit, Print. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switches to control avoidance of duplicate, reciprocal and self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control cost of assembling mating groups (1 or 11 Hard, 2 Distance, 3 Overlap)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "(Deprecated) Switch to control ranking of full sibs"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Switch to control Committed Matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, "Real number parameters:", row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 25, " , ", "TargetDegrees (Used under BS3, BS4 and BS5 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", sub("\\.", ",", as.character(0.075)), " , ", "xAx2Limit  Coancestry limit (Used under BS1 and BS2 only)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 75, " , ", "WeightOnxAx2 (Unscaled. Used under BS0 only. Use histogram control of Progeny Coancestry instead.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -1, " , ", "WeightOnF (a negative Weighting to reduce Progeny Inbreeding)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 1, " , ", "WeightOnFrontier (use only to alter overall emphasis on Frontier) "), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for later use (was WeightOnF_T)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", sub("\\.", ",", as.character(99.9)), " , ", "ConvergePercentTarget  (Helps to stop run. See manual)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "NoChangePercent (No improvement over ~this percent of generations helps to stop. See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 10, " , ", "FrontDegreeGap  (For Frontier drawing)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "xNRMlimit (Values below this are treated as zero in NRM, for speed.  Generally leave at 0)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "BiSexCands  (Set to 1 where a candidate can be male AND female, else 0.  See manual.)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", -999999, " , ", "Missing (This value is dataset is treated as missing for traits, etc.  Preferably use a period . )"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Mixed Mating Groups (number of mixed mating groups, else 0 to not use this feature)"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for avoiding duplicate, reciprocal and/or self matings"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Weighting for soft implementation of Location issue"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Reserved for future use"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("For a new job leave the rest of this file blank, after this line. Run then click Save in Windows MateSel.  Then you can edit defaults here if required."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", length(population$info$trait.name), " , ", "Number of traits"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0(" ", 0, " , ", "Number of marker loci"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Parameters to manipulate Inbreeding, Coancestry, Trait and Marker histograms ..."), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("Item Invoked ControlType Weighting Target1 Target2 Target3"), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgInb" , " ", 0, " ", 8, " ", 1, " ", 0.2499, " ", 0.2499, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("SireCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("DamCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
utils::write.table(file=matesel.ini.path, paste0("ProgCoan" , " ", 0, " ", 1, " ", 1, " ", 0, " ", 0, " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
## generation of the data file
data_file = NULL
gen = 4
database = NULL
cohorts = NULL
pedigree.depth = 7
# if sex are assigned based on database position if gen/database/cohorts are used
selection.m.gen = NULL
selection.m.database = NULL
selection.m.cohorts = NULL
maxuse.m = 25
minuse.m = 0
absminuse.m = 0
selection.f.gen = NULL
selection.f.database = NULL
selection.f.cohorts = NULL
maxuse.f = 1
minuse.f = 0
absminuse.f = 0
database = get.database(population, gen = gen, database = database, cohorts = cohorts, per.individual = TRUE)
ped = get.pedigree(population, database = database, id = TRUE)
n_indi = nrow(ped)
sex = rep("F", n_indi)
sex[database[,2]==1] = "M"
maxuse = rep(maxuse.m, n_indi)
maxuse[sex == "F"] = maxuse.f
minuse = rep(minuse.m, n_indi)
minuse[sex == "F"] = minuse.f
absminuse = rep(absminuse.m, n_indi)
absminuse[sex == "F"] = absminuse.f
matinggroup = 0 ## PLACEHOLDER!
data_file = cbind(ped, sex, maxuse, minuse, absminuse, matinggroup)
## ADD old animals
## PLACEHOLDER - just use all old for now
ped2 = get.pedigree(population, gen = 1:3, id = TRUE)
database2 = get.database(population, gen = 1:3,per.individual = TRUE)
sex2 = rep("M", nrow(database2))
sex2[database2[,2]==2] = "F"
data_file2 = cbind(ped2, sex2,0,0,0,0)
bve = t(get.bve(population, database = database))
bve2 = t(get.bve(population, database = database2))
index_value = breeding.diploid(population, selection.m.database = database, export.selected = TRUE,
sort.selected.pos = TRUE)[[1]][,4]
index_value2 = 0
data_file = cbind(data_file, bve, index_value)
data_file2 = cbind(data_file2, bve2, index_value2)
names = colnames(bve)
names <- gsub(" ", "_", names)
data_file_joint = rbind(data_file2, data_file)
colnames(data_file_joint) = c("Id", "Sire", "Dam", "Sex", "MaxUse", "Minuse", "AbsMinuse", "MatingGroup", names, "Index")
write.table(file = matesel.main.path, data_file_joint, row.names = FALSE, col.names = TRUE , quote=FALSE )
for(index in 1:ncol(bve)){
utils::write.table(file=matesel.ini.path, paste0(names[index] , " ", 0, " ", 1, " ", 1, " ", max(bve[,index]), " ", max(bve[,index]), " ", 50), row.names = FALSE, col.names = FALSE , quote=FALSE, append = TRUE)
}
}
